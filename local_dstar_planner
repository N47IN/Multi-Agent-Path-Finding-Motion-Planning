import math

import numpy as np

import cv2
from operator import itemgetter




""" def displayGoal(goal,start,image):
    image = cv2.circle(image,(int(goal[0]), int(goal[1])), 10, (0,0,255), -1)
    image = cv2.circle(image,(int(start[0]), int(start[1])), 10, (255,0,0), -1)
    cv2.imshow("square_circle_opencv.jpg", image)
    cv2.waitKey(0) """

class Node:
    def __init__(self,x,y, parent):
        self.x = x
        self.y = y
        self.parent = parent

class Map:
    def __init__(self):
        self.x_size = 10
        self.y_size = 10
        self.goal = []



class dStar:
    def __init__(self, img_path):
        self.img = cv2.imread(img_path)
        self.shape = self.img.shape[:2]
    def readMap(self):
        # Read Map
        img = cv2.imread("Image.png")
        image_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        r_channel, g_channel, b_channel = cv2.split(image_rgb)
        r_thresh = 200
        g_thresh = 100
        b_thresh = 70
        # consider blue channel since b_brown = 0
        r_threshed = cv2.threshold(r_channel, r_thresh, 255, cv2.THRESH_BINARY)[1]
        g_threshed = cv2.threshold(g_channel, g_thresh, 255, cv2.THRESH_BINARY)[1]
        b_threshed = cv2.threshold(b_channel, b_thresh, 255, cv2.THRESH_BINARY)[1]
        # Denoise to remove grains
        #image1 = cv2.circle(image1,(int(goal[i]), int(goal[1])), 5, (0,255,0), -1)
        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3,3))
        binaryMask = cv2.morphologyEx(b_threshed, cv2.MORPH_CLOSE, kernel)
        cv2.imwrite("Binary_Mask.png", binaryMask)
        #cv2.waitKey(0)
        return binaryMask

# cartesian to pixel
    def ctop(self,point):
        y = min(self.shape[0]-1,int(self.shape[0] - point[0]/10*self.shape[0]))
        x = min(self.shape[1]-1,int(self.shape[1] - point[1]/10*self.shape[1]))
        return x,y


    def setStart(self, start):
        self.start = start

    def setGoal(self, goal):
        self.goal = goal
    def goal_check(self, node, goal, goal_threshold = 10):
        dist = np.sqrt((goal[1] - node[1])**2 + (goal[0] - node[0])**2)
        # print(dist)
        if dist < goal_threshold:
            return True
        else:
            return False


#STUFF FOR DSTAR

    def tcost(self,state, updated_img):

        #print(type(updated_img))
        if np.array_equal(updated_img[state[1], state[0]], [0, 0, 0]):
            return(1000)
        else:
            return(1)
        return None

    def hcost(self,state, goal):
        #print(state, goal)
        return(math.sqrt((state[0]-goal[0])**2+(state[1]-goal[1])**2))


    def tag(self,state, updated_img):
        if(all(a==b for a,b in zip(updated_img[state[1], state[0]], [0,0,0]))):
            return True
        return False


# def update_kcost(fringe):
#
#     #fringe: state, waypoints, hcost, kcost, raised
#     #print(fringe)
#     waypoints=fringe[0][-1]
#     for i in range(len(fringe[0])):
#         for j in range(len(waypoints)):
#             if(fringe[i][0]==waypoints[j]):
#                 fringe[i][4]==1 #raise node
#                 fringe[i][3]==1000 #update node kcost




    def get_neighbors(self,updated_image, node):

        #cv2.imshow("test", updated_image)

        x,y=node[0], node[1]
        #print(x,y)
        neighbors = []
        point_size=2
        offsets = [(0, point_size), (0, -point_size), (point_size, 0), (-point_size, 0), (point_size, point_size),
                   (-point_size, point_size), (point_size, -point_size), (-point_size, -point_size)]

        for dx, dy in offsets:
            neighbor_x = x + dx
            neighbor_y = y + dy


            #print(neighbor_x,neighbor_y)
            print(updated_image[neighbor_y, neighbor_x])
            if (20 <= neighbor_x < updated_image.shape[0] and 20 <= neighbor_y < updated_image.shape[1]):
                if np.array_equal(updated_image[neighbor_y, neighbor_x], [255, 255, 255]):
                    neighbors.append((neighbor_x, neighbor_y))

            #print(image[neighbors[-1]])

        #print(neighbors)
        return neighbors


    def PATH(self):


        updated_image=self.img
        print(updated_image[500,500])

        start_pix=[self.ctop(self.start)[0], self.ctop(self.start)[1]]
        goal_pix=self.ctop(goal)
        goal_pix=[goal_pix[0], goal_pix[1]]
        #print(start_pix, goal_pix)

        fringe=[(goal_pix, [goal_pix], self.tcost(goal_pix, updated_image), 0, 0, False)]#state, waypoints,tcost, hcost, kcost, raised?
        closed_list=[(0,0), False]


        while fringe:
            #print(fringe)
            #update_kcost(fringe)


            state, waypoints, t_cost, h_cost, k_cost, raised=fringe.pop()




            if (self.goal_check(state, start_pix, goal_threshold=20)):
                print("GOAL!")
                #print(waypoints)
                return waypoints

            if [state, raised] not in closed_list:
                #print('not there')
                closed_list.append([state,raised])
                #print(closed_list)

                successors=self.get_neighbors(updated_image,state)
                print(successors)

                for successor in successors:
                    if [successor, self.tag(successor, updated_image)] not in closed_list:
                        #print(closed_list[-1][0])

                        if(closed_list[-1][1]==True):  #check if predecessor is raised

                            fringe.append(
                                (successor, waypoints+[successor],
                                 t_cost+self.tcost(successor, updated_image),  #transition cost
                                 self.hcost(successor, goal_pix),  #h cost NOT HEURISTIC
                                 min(self.hcost(successor,start_pix), 1000),  # update k cost
                                 True  #raised successors
                                 ))
                        else:
                            fringe.append(
                                (successor, waypoints+[successor],
                                 t_cost + self.tcost(successor, updated_image),  # transition cost
                                 self.hcost(successor, goal_pix),  # h cost
                                 self.hcost(successor, start_pix),  #k cost=h cost
                                 self.tag(successor, updated_image)  #check raised scene
                                 ))
                    #print(fringe[-1])
            #put raised elements in the back
            #print(fringe[-1][-1])
            fringe.sort(key=itemgetter(4), reverse=True)

        return None


    def displayDSTAR(self,waypoints):
        #draw robot movement
        #print(waypoints)
        updated_image=self.img

        for i in range(1,len(waypoints)):
            line_start = waypoints[i-1]
            line_end =waypoints[i]
            cv2.line(updated_image, line_end, line_start, (255,255,0), 3)
            cv2.imshow("Nodes", updated_image)

            cv2.waitKey(20)
        cv2.waitKey(2000)


if __name__ == '__main__':

    planner=dStar(r"Image.png")
    start = [9,4]
    goal = [2,8]
    planner.setStart(start)
    planner.setGoal(goal)

    path=planner.PATH()
    planner.displayDSTAR(path)


